From 461b1234463ea2f33878f8ce07484a85d843d176 Mon Sep 17 00:00:00 2001
From: Ian Pozella <Ian.Pozella@imgtec.com>
Date: Mon, 27 Feb 2017 17:42:14 +0000
Subject: [PATCH 22/28] mtd: spi-nand: use mtd device embedded in nand_chip

* struct nand_chip now embeds an mtd device, use it instead of allocating a new one
  (based on "staging: mt29f_spinand: use the mtd instance embedded in struct nand_chip")
* make use of mtd_to_nand to avoid use of mtd->priv
  (based on "staging: mt29f_spinand: make use of mtd_to_nand()")
* make use of nand_set/get_controller_data() helpers
  (based on "staging: mt29f_spinand: make use of nand_set/get_controller_data() helpers")

Signed-off-by: Ian Pozella <Ian.Pozella@imgtec.com>
---
 drivers/mtd/spi-nand/spi-nand-base.c | 35 ++++++++++++++++-------------------
 include/linux/mtd/spi-nand.h         |  1 -
 2 files changed, 16 insertions(+), 20 deletions(-)

diff --git a/drivers/mtd/spi-nand/spi-nand-base.c b/drivers/mtd/spi-nand/spi-nand-base.c
index ca311a9..e78a98a 100644
--- a/drivers/mtd/spi-nand/spi-nand-base.c
+++ b/drivers/mtd/spi-nand/spi-nand-base.c
@@ -279,9 +279,9 @@ static int spi_nand_read_page(struct spi_nand *snand, unsigned int page_addr,
 			dev_err(snand->dev,
 				"internal ECC error reading page 0x%x\n",
 				page_addr);
-			snand->mtd.ecc_stats.failed++;
+			snand->nand_chip.mtd.ecc_stats.failed++;
 		} else {
-			snand->mtd.ecc_stats.corrected += corrected;
+			snand->nand_chip.mtd.ecc_stats.corrected += corrected;
 		}
 	}
 
@@ -303,8 +303,8 @@ static int spi_nand_read_page(struct spi_nand *snand, unsigned int page_addr,
 
 static u8 spi_nand_read_byte(struct mtd_info *mtd)
 {
-	struct nand_chip *chip = mtd->priv;
-	struct spi_nand *snand = chip->priv;
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spi_nand *snand = nand_get_controller_data(chip);
 	char val = 0xff;
 
 	if (snand->buf_start < snand->buf_size)
@@ -314,8 +314,8 @@ static u8 spi_nand_read_byte(struct mtd_info *mtd)
 
 static void spi_nand_write_buf(struct mtd_info *mtd, const u8 *buf, int len)
 {
-	struct nand_chip *chip = mtd->priv;
-	struct spi_nand *snand = chip->priv;
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spi_nand *snand = nand_get_controller_data(chip);
 	size_t n = min_t(size_t, len, snand->buf_size - snand->buf_start);
 
 	memcpy(snand->data_buf + snand->buf_start, buf, n);
@@ -324,8 +324,8 @@ static void spi_nand_write_buf(struct mtd_info *mtd, const u8 *buf, int len)
 
 static void spi_nand_read_buf(struct mtd_info *mtd, u8 *buf, int len)
 {
-	struct nand_chip *chip = mtd->priv;
-	struct spi_nand *snand = chip->priv;
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spi_nand *snand = nand_get_controller_data(chip);
 	size_t n = min_t(size_t, len, snand->buf_size - snand->buf_start);
 
 	memcpy(buf, snand->data_buf + snand->buf_start, n);
@@ -346,7 +346,7 @@ static int spi_nand_read_page_hwecc(struct mtd_info *mtd,
 		struct nand_chip *chip, uint8_t *buf, int oob_required,
 		int page)
 {
-	struct spi_nand *snand = chip->priv;
+	struct spi_nand *snand = nand_get_controller_data(chip);
 
 	chip->read_buf(mtd, buf, mtd->writesize);
 	chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
@@ -356,7 +356,7 @@ static int spi_nand_read_page_hwecc(struct mtd_info *mtd,
 
 static int spi_nand_waitfunc(struct mtd_info *mtd, struct nand_chip *chip)
 {
-	struct spi_nand *snand = chip->priv;
+	struct spi_nand *snand = nand_get_controller_data(chip);
 	int ret;
 
 	ret = spi_nand_wait_till_ready(snand);
@@ -377,8 +377,8 @@ static int spi_nand_waitfunc(struct mtd_info *mtd, struct nand_chip *chip)
 static void spi_nand_cmdfunc(struct mtd_info *mtd, unsigned int command,
 			     int column, int page_addr)
 {
-	struct nand_chip *chip = mtd->priv;
-	struct spi_nand *snand = chip->priv;
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct spi_nand *snand = nand_get_controller_data(chip);
 
 	/*
 	 * In case there's any unsupported command, let's make sure
@@ -463,8 +463,7 @@ int spi_nand_check(struct spi_nand *snand)
 int spi_nand_register(struct spi_nand *snand, struct nand_flash_dev *flash_ids)
 {
 	struct nand_chip *chip = &snand->nand_chip;
-	struct mtd_part_parser_data ppdata = {};
-	struct mtd_info *mtd = &snand->mtd;
+	struct mtd_info *mtd = nand_to_mtd(chip);
 	struct device_node *np = snand->dev->of_node;
 	const char __maybe_unused *of_mtd_name = NULL;
 	int ret;
@@ -474,7 +473,8 @@ int spi_nand_register(struct spi_nand *snand, struct nand_flash_dev *flash_ids)
 	if (ret)
 		return ret;
 
-	chip->priv	= snand;
+	nand_set_controller_data(chip, snand);
+	nand_set_flash_node(chip, np);
 	chip->read_buf	= spi_nand_read_buf;
 	chip->write_buf	= spi_nand_write_buf;
 	chip->read_byte	= spi_nand_read_byte;
@@ -499,7 +499,6 @@ int spi_nand_register(struct spi_nand *snand, struct nand_flash_dev *flash_ids)
 	else
 		mtd->name = snand->name;
 	mtd->owner = THIS_MODULE;
-	mtd->priv = chip;
 
 	/* Allocate buffer to be used to read/write the internal registers */
 	snand->buf = kmalloc(SPI_NAND_CMD_BUF_LEN, GFP_KERNEL);
@@ -550,8 +549,7 @@ int spi_nand_register(struct spi_nand *snand, struct nand_flash_dev *flash_ids)
 	if (ret)
 		return ret;
 
-	ppdata.of_node = np;
-	return mtd_device_parse_register(mtd, NULL, &ppdata, NULL, 0);
+	return mtd_device_register(mtd, NULL, 0);
 }
 EXPORT_SYMBOL_GPL(spi_nand_register);
 
@@ -559,7 +557,6 @@ void spi_nand_unregister(struct spi_nand *snand)
 {
 	kfree(snand->buf);
 	kfree(snand->data_buf);
-	nand_release(&snand->mtd);
 }
 EXPORT_SYMBOL_GPL(spi_nand_unregister);
 
diff --git a/include/linux/mtd/spi-nand.h b/include/linux/mtd/spi-nand.h
index 9dd2ad6..c7e52f9 100644
--- a/include/linux/mtd/spi-nand.h
+++ b/include/linux/mtd/spi-nand.h
@@ -13,7 +13,6 @@
 #include <linux/mtd/nand.h>
 
 struct spi_nand {
-	struct mtd_info		mtd;
 	struct nand_chip	nand_chip;
 	struct device		*dev;
 	const char		*name;
-- 
2.7.4

